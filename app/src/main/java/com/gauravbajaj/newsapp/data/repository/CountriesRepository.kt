package com.gauravbajaj.newsapp.data.repository

import com.gauravbajaj.newsapp.data.model.Country
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Repository for accessing a static list of countries.
 * This class provides a Flow of Country objects, which can be observed for changes.
 * The list of countries is predefined and does not change.
 */
@Singleton
class CountriesRepository @Inject constructor() {
    fun getCountries(): Flow<List<Country>> = flow {
        emit(countriesList)
    }

    companion object {
        val countriesList = listOf(
            Country("ar", "Argentina", "ğŸ‡¦ğŸ‡·"),
            Country("at", "Austria", "ğŸ‡¦ğŸ‡¹"),
            Country("au", "Australia", "ğŸ‡¦ğŸ‡º"),
            Country("be", "Belgium", "ğŸ‡§ğŸ‡ª"),
            Country("bg", "Bulgaria", "ğŸ‡§ğŸ‡¬"),
            Country("br", "Brazil", "ğŸ‡§ğŸ‡·"),
            Country("ca", "Canada", "ğŸ‡¨ğŸ‡¦"),
            Country("cn", "China", "ğŸ‡¨ğŸ‡³"),
            Country("co", "Colombia", "ğŸ‡¨ğŸ‡´"),
            Country("cu", "Cuba", "ğŸ‡¨ğŸ‡º"),
            Country("cz", "Czech Republic", "ğŸ‡¨ğŸ‡¿"),
            Country("de", "Germany", "ğŸ‡©ğŸ‡ª"),
            Country("eg", "Egypt", "ğŸ‡ªğŸ‡¬"),
            Country("fr", "France", "ğŸ‡«ğŸ‡·"),
            Country("gr", "Greece", "ğŸ‡¬ğŸ‡·"),
            Country("hk", "Hong Kong", "ğŸ‡­ğŸ‡°"),
            Country("hu", "Hungary", "ğŸ‡­ğŸ‡º"),
            Country("id", "Indonesia", "ğŸ‡®ğŸ‡©"),
            Country("ie", "Ireland", "ğŸ‡®ğŸ‡ª"),
            Country("in", "India", "ğŸ‡®ğŸ‡³"),
            Country("il", "Israel", "ğŸ‡®ğŸ‡±"),
            Country("it", "Italy", "ğŸ‡®ğŸ‡¹"),
            Country("jp", "Japan", "ğŸ‡¯ğŸ‡µ"),
            Country("lt", "Lithuania", "ğŸ‡±ğŸ‡¹"),
            Country("lv", "Latvia", "ğŸ‡±ğŸ‡»"),
            Country("ma", "Morocco", "ğŸ‡²ğŸ‡¦"),
            Country("my", "Malaysia", "ğŸ‡²ğŸ‡¾"),
            Country("mx", "Mexico", "ğŸ‡²ğŸ‡½"),
            Country("nl", "Netherlands", "ğŸ‡³ğŸ‡±"),
            Country("nz", "New Zealand", "ğŸ‡³ğŸ‡¿"),
            Country("ng", "Nigeria", "ğŸ‡³ğŸ‡¬"),
            Country("no", "Norway", "ğŸ‡³ğŸ‡´"),
            Country("ph", "Philippines", "ğŸ‡µğŸ‡­"),
            Country("pl", "Poland", "ğŸ‡µğŸ‡±"),
            Country("pt", "Portugal", "ğŸ‡µğŸ‡¹"),
            Country("ro", "Romania", "ğŸ‡·ğŸ‡´"),
            Country("rs", "Serbia", "ğŸ‡·ğŸ‡¸"),
            Country("ru", "Russia", "ğŸ‡·ğŸ‡º"),
            Country("sa", "Saudi Arabia", "ğŸ‡¸ğŸ‡¦"),
            Country("sg", "Singapore", "ğŸ‡¸ğŸ‡¬"),
            Country("si", "Slovenia", "ğŸ‡¸ğŸ‡®"),
            Country("sk", "Slovakia", "ğŸ‡¸ğŸ‡°"),
            Country("za", "South Africa", "ğŸ‡¿ğŸ‡¦"),
            Country("kr", "South Korea", "ğŸ‡°ğŸ‡·"),
            Country("se", "Sweden", "ğŸ‡¸ğŸ‡ª"),
            Country("ch", "Switzerland", "ğŸ‡¨ğŸ‡­"),
            Country("tw", "Taiwan", "ğŸ‡¹ğŸ‡¼"),
            Country("th", "Thailand", "ğŸ‡¹ğŸ‡­"),
            Country("tr", "Turkey", "ğŸ‡¹ğŸ‡·"),
            Country("ua", "Ukraine", "ğŸ‡ºğŸ‡¦"),
            Country("ae", "United Arab Emirates", "ğŸ‡¦ğŸ‡ª"),
            Country("gb", "United Kingdom", "ğŸ‡¬ğŸ‡§"),
            Country("us", "United States", "ğŸ‡ºğŸ‡¸"),
            Country("ve", "Venezuela", "ğŸ‡»ğŸ‡ª")
        )
    }
}